{
  plugins: {
    // configuration of "storage_manager" plugin:
    storage_manager: {
      volumes: {
        // configuration of a "influxdb" volume (the "zenoh_backend_influxdb" backend library will be loaded at startup)
        // this should be named influxdb for v1 and influxdb2 for v2
        influxdb2: {
          // URL to the InfluxDB service.
          url: "http://localhost:8086/api/v2/",
          private: {
            // If needed: InfluxDB credentials, preferably ALL-ACCESS for databases creation and drop
            // if not ALL-ACCESS then atleast with authorization to create/delete buckets
            // Note: this should not be left empty; if you have no admin creds, you can copy the user creds instead
            org_id: "organization ID",
            token: "access token"
          }
        }
      },
      storages: {
        // configuration of a "demo" storage using the "influxdb" volume
        demo: {
          // the key expression this storage will subscribe to
          key_expr: "demo/example/**",
          // this prefix will be stripped from the received key when converting to database key.
          // i.e.: "demo/example/a/b" will be stored as "a/b"
          // this option is optional
          strip_prefix: "demo/example",
          volume: {
            // this will be influxdb for v1 and influxdb2 for v2 (exactly the same name as in volumes section)
            id: "influxdb2",
            // the database/bucket name within InfluxDB
            db: "zenoh_example",
            // if the database doesn't exist, create it
            create_db: false,
            // strategy on storage closure 
            // variants include `drop_series`, `drop_db`, `do_nothing`
            on_closure: "do_nothing",
            private: {
              // InfluxDB credentials, with read/write privileges for the database
              // If not provided, will use volume private fields instead
              // the org_id value should be the same as for admin
              org_id: "organization ID",
              // this is a token with either:
              // a.) Read-Write access to the existing DB named above in the config (case where db/bucket already exists)
              // b.) Read-write access to ALL buckets in the organization so it can access the new bucket created by zenoh;
              // (case where a new db/bucket has to be created)
              token: "user access token" 
            }
          }
        }
      }
    },
  }
}